import { useState, useEffect } from "react";
import Column from "../Column/Column";
import { useNotifications } from "../../hooks/useNotifications";
import { useHistory } from "../../hooks/useHistory";

import styles from "./DragDropBoard.module.css";

function DragDropBoard() {
  const { showNotification } = useNotifications();
  const { pushState, goBack, goForward, canGoBack, canGoForward } =
    useHistory();
  const [columns] = useState([
    { id: "todo", title: "–ó–∞–¥–∞—á–∞" },
    { id: "inProgress", title: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" },
    { id: "done", title: "–°–¥–µ–ª–∞–Ω–æ" },
  ]);
  const [tasks, setTasks] = useState([
    {
      id: "1",
      title: "–ò–∑—É—á–∏—Ç—å React",
      description: "–û—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã React –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      priority: "high",
      columnId: "todo",
    },
    {
      id: "2",
      title: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Vite",
      description: "–ò–∑—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Vite –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
      priority: "medium",
      columnId: "todo",
    },
  ]);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π –∑–∞–¥–∞—á–∏
  const [draggedTask, setDraggedTask] = useState(null);
  const [editingTaskId, setEditingTaskId] = useState(null);

  const handleUpdateTask = (taskId, updatedFields) => {
    const updatedTasks = tasks.map((task) =>
      task.id === taskId ? { ...task, ...updatedFields } : task
    );
    setTasks(updatedTasks);
    showNotification("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", {
      body: `–ó–∞–¥–∞—á–∞ "${
        updatedTasks.find((t) => t.id === taskId).title
      }" –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`,
      tag: "task-updated",
    });

    pushState(
      {
        action: "update_task",
        taskId,
        oldValues: tasks.find((t) => t.id === taskId),
        newValues: updatedTasks.find((t) => t.id === taskId),
        timestamp: Date.now(),
      },
      `Updated task`,
      `?updated=${taskId}`
    );
  };

  const handleStartEditing = (taskId) => {
    setEditingTaskId(taskId);
  };

  const handleFinishEditing = () => {
    setEditingTaskId(null);
  };

  const handleDragStart = (task) => {
    setDraggedTask(task);
    console.log("–ù–∞—á–∞–ª —Ç—è–Ω—É—Ç—å:", task.title);
  };

  const handleDragEnd = (task) => {
    setDraggedTask(null);
    console.log("–ó–∞–∫–æ–Ω—á–∏–ª —Ç—è–Ω—É—Ç—å:", task.title);
  };

  const handleDrop = (taskId, newColumnId) => {
    const task = tasks.find((t) => t.id === taskId);

    if (!task) return;

    if (task.columnId === newColumnId) return;

    const oldState = { tasks: [...tasks] };

    console.log(oldState);

    const updatedTasks = tasks.map((t) =>
      t.id === taskId ? { ...t, columnId: newColumnId } : t
    );

    setTasks(updatedTasks);

    const oldColumn = columns.find((c) => c.id === task.columnId);
    const newColumn = columns.find((c) => c.id === newColumnId);

    showNotification("–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞!", {
      body: `"${task.title}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∏–∑ "${oldColumn?.title}" –≤ "${newColumn?.title}"`,
      tag: "task-moved",
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
    pushState(
      {
        action: "move_task",
        taskId,
        from: task.columnId,
        to: newColumnId,
        timestamp: Date.now(),
      },
      `Moved ${task.title}`,
      `?moved=${taskId}`
    );

    console.log(
      `–ó–∞–¥–∞—á–∞ "${task.title}" –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –∏–∑ ${task.columnId} to ${newColumnId}`
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleDeleteTask = (taskId) => {
    const taskToDelete = tasks.find((t) => t.id === taskId);

    if (!taskToDelete) return;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (
      window.confirm(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${taskToDelete.title}"?`
      )
    ) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
      const updatedTasks = tasks.filter((t) => t.id !== taskId);

      setTasks(updatedTasks);

      showNotification("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", {
        body: `–ó–∞–¥–∞—á–∞ "${taskToDelete.title}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`,
        tag: "task-deleted",
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
      pushState(
        {
          action: "delete_task",
          taskId,
          deletedTask: taskToDelete,
          timestamp: Date.now(),
        },
        `Deleted ${taskToDelete.title}`,
        `?deleted=${taskId}`
      );

      console.log(`–ó–∞–¥–∞—á–∞ "${taskToDelete.title}" —É–¥–∞–ª–µ–Ω–∞`);
    }
  };

  const getTasksForColumn = (columnId) => {
    return tasks.filter((task) => task.columnId === columnId);
  };

  const addNewTask = () => {
    const newTask = {
      id: Date.now().toString(), // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      title: `–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${tasks.length + 1}`,
      description: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
      priority: "medium",
      columnId: "todo",
    };

    setTasks((prev) => [...prev, newTask]);

    showNotification("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", {
      body: `–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: "${newTask.title}"`,
      tag: "task-created",
    });
  };

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const movedTaskId = urlParams.get("moved");

    if (movedTaskId) {
      const taskElement = document.querySelector(
        `[data-task-id="${movedTaskId}"]`
      );
      if (taskElement) {
        taskElement.classList.add("highlighted");
        setTimeout(() => {
          taskElement.classList.remove("highlighted");
        }, 2000);
      }
    }
  }, [tasks]);

  return (
    <div className={styles.drag_drop_board}>
      <div className={styles.board_controls}>
        <button
          onClick={goBack}
          disabled={!canGoBack}
          className={styles.history_btn}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>

        <button
          onClick={goForward}
          disabled={!canGoForward}
          className={styles.history_btn}
        >
          –í–ø–µ—Ä–µ–¥ ‚Üí
        </button>

        <button onClick={addNewTask} className={styles.add_task_btn}>
          + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        </button>
      </div>
      <div className={styles.edit_hint}>
        <span className={styles.hint_icon}>üí°</span>
        <span>–°–æ–≤–µ—Ç: –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë</span>
      </div>
      {draggedTask && (
        <div className={styles.history_info}>
          –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è: {draggedTask.title}
        </div>
      )}
      <div className={styles.board_columns}>
        {columns.map((column) => (
          <Column
            key={column.id}
            column={column}
            tasks={getTasksForColumn(column.id)}
            onDrop={handleDrop}
            onDragStart={handleDragStart}
            onDragEnd={handleDragEnd}
            onDeleteTask={handleDeleteTask}
            onUpdateTask={handleUpdateTask}
            onStartEditing={handleStartEditing}
            onFinishEditing={handleFinishEditing}
            editingTaskId={editingTaskId}
          />
        ))}
      </div>
    </div>
  );
}

export default DragDropBoard;
